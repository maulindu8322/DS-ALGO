X : ABCBDAB
Y : BDCABA
Z : BADACB
LCS : 4 (BDAB)

The recursion solution will be : 

#include<bits/stdc++.h>
#define ll long long int
using namespace std;
int maximum(int a,int b,int c)
{
    return max(max(a,b),c);
}
int lcs(string x, string y, string z, int m, int n, int o)
{
    if(m==0||n==0||o==0)
        return 0;
    if(x[m-1]==y[n-1] && y[n-1]==z[o-1])
    {
        return 1 + lcs(x,y,z,m-1,n-1,o-1);
    }
    else
        return maximum(lcs(x,y,z,m-1,n,o),lcs(x,y,z,m,n-1,o),lcs(x,y,z,m,n,o-1));
}
int main()
{
    string x,y,z;
    cout << "Enter x :" << endl;
    cin >> x;
    cout << "Enter y :" << endl;
    cin >> y;
    cout << "Enter z :" << endl;
    cin >> z;
    cout << "Max length of LCS is : " << lcs(x,y,z,x.size(),y.size(),z.size()) << endl;
    return 0;
}
----------------------------------------------------------------------------------------------------------------------------
But the time complexity will be 3^(m+n+o), which is fucking big... so we are gonna try a different approach.
----------------------------------------------------------------------------------------------------------------------------
 
#include<bits/stdc++.h>
#define ll long long int
using namespace std;

int lcs(string x, string y, string z, int m, int n, int o)
{
    int f[m+1][n+1][o+1];
    int i,j,k;
    for(i=0;i<=m;i++)
    {
        for(j=0;j<=n;j++)
        {
            for(k=0;k<=o;k++)
            {
                if(i==0 || j==0 || k==0)
                    f[i][j][k] = 0;
                else if(x[i-1]==y[j-1] && x[i-1]==z[k-1])
                        f[i][j][k] = f[i-1][j-1][k-1]+1;
                else
                        f[i][j][k] = max(max(f[i-1][j][k],f[i][j-1][k]),f[i][j][k-1]);

            }
        }
    }
    return f[m][n][o];
}
int main()
{
    string x,y,z;
    cout << "Enter x :" << endl;
    cin >> x;
    cout << "Enter y :" << endl;
    cin >> y;
    cout << "Enter z :" << endl;
    cin >> z;
    int m = x.length();
    int n = y.length();
    int o = z.length();
    cout << "Max length of LCS is : " << lcs(x,y,z,m,n,o) << endl;
    return 0;
}


---------------------------------------------------------------------------------------------------------------------
This has time complexity of T(mno)
---------------------------------------------------------------------------------------------------------------------

